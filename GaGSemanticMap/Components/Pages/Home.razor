@page "/"
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject ISemanticSearchService _semanticService
@inject IKernelService _kernelService;
@using System.Collections.ObjectModel;

@using Microsoft.JSInterop
@inject IJSRuntime JS




<PageTitle>GaG Search Engine</PageTitle>


<div class="sidebar" style="@sidebarWidth;color:white">

	<a class="closebtn" @onclick="CloseNav">&times;</a>

	<h3>Description</h3>

	<p class="stats-row">
		This is a search engine for podcast episodes. Currently, the history podcast "Geschichten aus der Geschichte" is configured, but the solution
		can be adapted for other podcasts by:
	</p>

	<ul>
		<li class="list">Adding a different CSV source (with calculated embeddings) </li>
	</ul>

	<p class="stats-row"> Enter a command related to a topic to get the top 5 recommended episodes. For example:</p>
	
	<ul>
		<li class="list"> Give me episodes about London </li>
		<li> I like to see episodes about strong women</li>
		<li> Give me all episodes related to food</li>
	</ul>

	<p class="stats-row"> Ask to know more about a specific topic to get infos directly from Open AI Chat. For example:</p>

	<ul>
		<li class="list"> I'd like to know more about the great smog of London</li>
	</ul>

	<p class="stats-row"> And finally, add podcast episodes to your "To Listen" list by asking Chat to do it. For example:</p>
	<ul>
		<li class="list"> Can you add Episode GAG:235 to my "To Listen" list?</li>
	</ul>
</div>



<div style="@mainMargin" class="mainarea">

	<h1> Podcast Episode Search Engine </h1>

	<!--for sidebar-->
	@if (width == 0)
	{
		<button class="openbtn" @onclick="OpenNav">&#9776; Open Instructions</button>
	}

	<div class="grid-container">
		<div>
			<h2 style="margin-top:20px"> Podcast: Geschichten aus der Geschichte</h2>
			<p> Type in what kind of topic you're interested in and get the best episodes for you! It's like talking to your favorite podcast!
			</p>

			<div class="chatbox">
				<h3>What kind of episodes are you interested in?</h3>

				<!-- ensure that UserInput is updated before onkeyup is triggered to get the text-->
				<input @bind-value="UserInput" @bind-value:event="oninput" @onkeyup="OnEnter" style="width:100%;height:30px;"/><br />

				<button class="btn btn-primary" @onclick="ProcessInput" tabindex="0" style="margin-top:5px; margin-bottom:5px" disabled="@Disabled">Go!</button>
				 
				<div class="chatpanel" id="chat_panel">

					<p style="text-align:right"><sup>Chat</sup></p>
					<!-- mainly differentiate for nice formatting-->
					@for(int i = 0; i< outputMessages.Count(); i++)
					{
						var outputMessage = outputMessages[i];

						if (outputMessage.StartsWith("User") || (outputMessage.StartsWith("Bot")))
						{
							<p style="margin-bottom: 2px"><strong>@outputMessage</strong></p>
						}
						else
						{
							<!-- bullet point episode formatting -->
							if (IsBulletPointFormat(outputMessage) && i+2 < outputMessages.Count())
							{
								<ul style="list-style-type: none; padding: 0;">
									<!--split it up even more-->
									<li><strong>@outputMessages[i]</strong></li>
									<ul>
										<li style="margin-bottom: 10px;">
											<span>@outputMessages[i + 1]</span>
											<a target="_blank" href="@TransformUrl(outputMessages[i + 2])">@TransformText(outputMessages[i + 2])</a>
										</li>
									</ul>
								</ul>

								i += 2;
							}
							else
							{
								<p>@outputMessage</p>
							}
						}

					}
				</div>
			</div>
		</div>

		<!-- The listening queue-->
		<div class="listening-queue">
			<h4>Listening Queue:</h4>
			<ul>
			@foreach(var q in queue)
			{
				<li>
						<a target="_blank" href="@GetEpisodeLink(q)">@q</a>
				</li>
			}
			</ul>
			<button class="btn btn-primary" @onclick="ScrollToEnd" tabindex="0" style="margin-top:5px; margin-bottom:5px">ScrollTest</button>
		</div>
	</div>
</div>


@code{

	//sidebar navigation
	int width = 0;
	string sidebarWidth => $"width: {width}px;";
	string mainMargin => $"margin-left: {width}px;";
	void OpenNav() => width = 450;
	void CloseNav() => width = 0;

	public string? UserInput { get; set; }
	public bool Disabled { get; set; }
	private ObservableCollection<string> outputMessages = new ObservableCollection<string>();
	private List<string> botChat = new List<string>();
	private List<string> queue = new List<string>();
	private Dictionary<string,string> episodeLinksDict = new Dictionary<string,string>();

	private async Task ProcessInput()
	{
		if (!string.IsNullOrEmpty(UserInput))
		{
			//disable send button, so user doesn't submit again when processing
			Disabled = true;

			outputMessages.Add("User:");
			outputMessages.Add($"{UserInput}");

			var input = UserInput;

			//clear the user input
			UserInput = "";

			//process the response
			var response =  await _kernelService.ProcessInput(input);

			//add to listening queue
			if(response.StartsWith("AddToQueue"))
			{
				var episodes = response.Split("\n");

				foreach (var ep in episodes)
				{
					var results = ep.Split(",");

					episodeLinksDict.Add(results[1], results[2]);

					queue.Add(results[1]);
				}

				outputMessages.Add("Bot:");
				outputMessages.Add("Added the episode(s) to the queue!");
			}
			//usual response pattern
			else
			{
				outputMessages.Add("Bot:");
				//split up the response and add
				foreach (var r in SplitResponse(response))
				{
					outputMessages.Add($"{r}");
				}
			}

			await ScrollToEnd();
			//enable button again
			Disabled = false;

		}
	}

	private async Task ScrollToEnd()
	{
		await InvokeAsync(() =>
				{

					StateHasChanged();
				});
	
		await JS.InvokeVoidAsync("scrollToEnd");
	}

	private async Task OnEnter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			await ProcessInput();
		}
	}


	#region formatting
	bool IsBulletPointFormat(string text)
	{
		// Adjust the logic based on your criteria
		return text.TrimStart().StartsWith("1.") ||
				text.TrimStart().StartsWith("2.") ||
				text.TrimStart().StartsWith("3.") ||
				text.TrimStart().StartsWith("4.") ||
				text.TrimStart().StartsWith("5.");
	}

	List<string> SplitResponse(string text)
	{

		// Split the text into individual lines
		var bulletPoints = text.Split('\n')
										.Select(line => line.Trim())
										.Where(line => !string.IsNullOrEmpty(line))
										.ToList();

		return bulletPoints;
	}

	private string GetEpisodeLink(string episodeName)
	{
		string link;

		episodeLinksDict.TryGetValue(episodeName, out link);

		return link;
	}

	string TransformLinks(string text)
	{
		// Replace [Listen to the episode](https://www.geschichte.fm/podcast/zs106/) with an HTML link
		return Regex.Replace(text, @"\[(.*?)\]\((.*?)\)", "<a href=\"$2\">$1</a>");
	}

	string TransformUrl(string text)
	{
		// Define a regular expression pattern to match [text](URL) format
		var regexPattern = @"\[(.*?)\]\((.*?)\)";

		// Use Regex.Match to find the first match in the input text
		var match = Regex.Match(text, regexPattern);

		// If a match is found, return the URL captured in the second group
		if (match.Success)
		{
			return match.Groups[2].Value;
		}

		// If no match is found, return an empty string or handle it as needed
		return string.Empty;
	}

	string TransformText(string text)
	{
		// Define a regular expression pattern to match [text](URL) format
		var regexPattern = @"\[(.*?)\]\((.*?)\)";

		// Use Regex.Match to find the first match in the input text
		var match = Regex.Match(text, regexPattern);

		// If a match is found, return the URL captured in the second group
		if (match.Success)
		{
			return match.Groups[1].Value;
		}

		// If no match is found, return an empty string or handle it as needed
		return string.Empty;
	}
	#endregion


}

